apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "com.google.protobuf"
apply plugin: 'kotlin-kapt'


android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.fire.myreivces"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    sourceSets {
        main {
            proto {
                srcDir 'src/main/proto'
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        dataBinding true
    }

}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.10.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
    generatedFilesBaseDir = "$projectDir/src/main"
}
/**
 * plugins 和 apply plugin 的区别：
 * plugins 是一种比较新的方法，它所引用的插件必须在 Gradle plugin repository 的仓库可见的
 * apply plugin 是一种比较老的方式，在 Android4.1 的时候，创建项目的时候，已经将 apply plugin 方法替换为 plugins
 *
 */



dependencies {
    implementation fileTree(dir: "plugins", include: ["*.jar"])

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7"
    implementation 'com.squareup.retrofit2:converter-gson:2.0.2'
    // Exifinterface 库
    implementation 'androidx.exifinterface:exifinterface:1.1.0'
    //protocol buffer
    implementation "com.google.protobuf:protobuf-javalite:3.10.0"

    def lifecycle_version = "2.2.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    //DataStore
    implementation "androidx.datastore:datastore-preferences:1.0.0-alpha04"
    //日志打印
    implementation 'com.orhanobut:logger:2.2.0'
    //轮播图
    implementation 'com.github.zhpanvip:BannerViewPager:3.4.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    //状态栏 https://github.com/Zackratos/UltimateBarX
    //状态栏 https://github.com/gyf-dev/ImmersionBar
    implementation 'com.gyf.immersionbar:immersionbar:3.0.0'
    implementation 'com.zackratos.ultimatebarx:ultimatebarx:0.4.1'
    //阿里路由
    implementation 'com.alibaba:arouter-api:1.5.1'
    implementation 'com.fire.WolfHttp:myHttp:1.0.0'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.6.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'
//    api project(':home')
//    api project(':mine')
//    api project(':box')
//    api project(':receive')

//    kapt 'com.alibaba:arouter-compiler:1.5.1'
//    api project(":myHttp")

}
//plugins {
//
//    id "com.google.protobuf" version "0.8.14"
//}